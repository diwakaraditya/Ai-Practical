without user



import heapq

goal_state = [[1,2,3],[4,5,6],[7,8,0]]
def heuristic(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = divmod(val-1, 3)
                dist += abs(x - i) + abs(y - j)
    return dist
def get_neighbors(state):
    def swap(i1, j1, i2, j2):
        s = [row[:] for row in state]
        s[i1][j1], s[i2][j2] = s[i2][j2], s[i1][j1]
        return s
    neighbors = []
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
                    ni, nj = i+dx, j+dy
                    if 0 <= ni < 3 and 0 <= nj < 3:
                        neighbors.append(swap(i, j, ni, nj))
    return neighbors
def a_star(start):
    visited = set()
    pq = [(heuristic(start), 0, start, [])]
    while pq:
        f, g, state, path = heapq.heappop(pq)
        s_tuple = tuple(map(tuple, state))
        if s_tuple in visited: continue
        visited.add(s_tuple)
        if state == goal_state:
            return path + [state]
        for neighbor in get_neighbors(state):
            if tuple(map(tuple, neighbor)) not in visited:
                heapq.heappush(pq, (g + 1 + heuristic(neighbor), g + 1, neighbor, path + [state]))
    return None
start_state = [[1,2,3],[4,0,6],[7,5,8]]
solution = a_star(start_state)
for step in solution:
    for row in step: print(row)
    print()




2. with user

import heapq

goal_state = [[1,2,3],[4,5,6],[7,8,0]]
def heuristic(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = divmod(val-1, 3)
                dist += abs(x - i) + abs(y - j)
    return dist
def get_neighbors(state):
    def swap(i1, j1, i2, j2):
        s = [row[:] for row in state]
        s[i1][j1], s[i2][j2] = s[i2][j2], s[i1][j1]
        return s
    neighbors = []
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
                    ni, nj = i+dx, j+dy
                    if 0 <= ni < 3 and 0 <= nj < 3:
                        neighbors.append(swap(i, j, ni, nj))
    return neighbors
def a_star(start):
    visited = set()
    pq = [(heuristic(start), 0, start, [])]
    while pq:
        f, g, state, path = heapq.heappop(pq)
        s_tuple = tuple(map(tuple, state))
        if s_tuple in visited:
            continue
        visited.add(s_tuple)
        if state == goal_state:
            return path + [state]
        for neighbor in get_neighbors(state):
            if tuple(map(tuple, neighbor)) not in visited:
                heapq.heappush(pq, (g + 1 + heuristic(neighbor), g + 1, neighbor, path + [state]))
    return None
print("Enter the initial state (row by row, use 0 for empty space):")
start_state = []
for i in range(3):
    row = list(map(int, input(f"Row {i+1}: ").split()))
    start_state.append(row)
solution = a_star(start_state)
if solution:
    print("\nSteps to reach goal state:")
    for idx, step in enumerate(solution):
        print(f"Step {idx}:")
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")

